using System;
using System.Text.RegularExpressions;
using TMPro;
using UnityEngine;

// Token: 0x020001E4 RID: 484
[CreateAssetMenu(fileName = "Input Field Validator", menuName = "Clone Hero/Hex Color Input Field Validator")]
public class HexValidator : TMP_InputValidator
{
	// Token: 0x06001570 RID: 5488 RVA: 0x000A780C File Offset: 0x000A5A0C
	public virtual char \u02B2\u02C0\u02C0\u02BD\u02B9\u02B3\u02B4\u02B6\u02B6\u02B9\u02B2(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "?");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\u0001';
	}

	// Token: 0x06001571 RID: 5489 RVA: 0x000A7874 File Offset: 0x000A5A74
	public virtual char \u02B4\u02BB\u02B5\u02BA\u02B5\u02BF\u02B3\u02BE\u02BF\u02C0\u02B2(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "Languages/");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB += 0;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\u0001';
	}

	// Token: 0x06001572 RID: 5490 RVA: 0x000A78DC File Offset: 0x000A5ADC
	public virtual char \u02BB\u02BE\u02B8\u02BA\u02BB\u02C1\u02BE\u02B4\u02BA\u02B5\u02BD(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "_CutoutTexture");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\0';
	}

	// Token: 0x06001573 RID: 5491 RVA: 0x000A7944 File Offset: 0x000A5B44
	public virtual char \u02B4\u02BF\u02B8\u02B8\u02BA\u02BC\u02B6\u02C1\u02B9\u02B8\u02B4(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "OnlineMenu");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\u0001';
	}

	// Token: 0x06001574 RID: 5492 RVA: 0x000A79AC File Offset: 0x000A5BAC
	public virtual char \u02B8\u02B3\u02B6\u02BF\u02C1\u02C1\u02B4\u02B9\u02BE\u02BA\u02B7(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "stars");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\u0001';
	}

	// Token: 0x06001575 RID: 5493 RVA: 0x000A7A14 File Offset: 0x000A5C14
	public virtual char \u02BD\u02B5\u02B6\u02BD\u02BA\u02B4\u02B3\u02BE\u02BB\u02B7\u02B6(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "Random Song");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\u0001';
	}

	// Token: 0x06001576 RID: 5494 RVA: 0x000A7A7C File Offset: 0x000A5C7C
	public override char Validate(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "^[0123456789ABCDEF]{0,6}$");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\0';
	}

	// Token: 0x06001577 RID: 5495 RVA: 0x000A7AE4 File Offset: 0x000A5CE4
	public virtual char \u02BC\u02B3\u02B5\u02BA\u02B6\u02BD\u02B5\u02B9\u02BD\u02C1\u02BA(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "Startup Parameters:");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB += 0;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\0';
	}

	// Token: 0x06001578 RID: 5496 RVA: 0x000A7B4C File Offset: 0x000A5D4C
	public virtual char \u02BA\u02BB\u02B3\u02C1\u02B9\u02BC\u02C0\u02B9\u02B5\u02BC\u02B9(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "settings");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\0';
	}

	// Token: 0x06001579 RID: 5497 RVA: 0x000A7BB4 File Offset: 0x000A5DB4
	public virtual char \u02BA\u02BC\u02BA\u02BF\u02B5\u02C1\u02C0\u02B9\u02B9\u02BC\u02B5(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "OnlineMenu");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\0';
	}

	// Token: 0x0600157A RID: 5498 RVA: 0x000A7C1C File Offset: 0x000A5E1C
	public virtual char \u02BC\u02C1\u02BE\u02B5\u02BB\u02C1\u02C1\u02B4\u02B2\u02B7\u02BE(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "Random Song (Section)");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\0';
	}

	// Token: 0x0600157C RID: 5500 RVA: 0x000A7C84 File Offset: 0x000A5E84
	public virtual char \u02B5\u02BD\u02BB\u02C0\u02B6\u02B9\u02B5\u02BA\u02BD\u02BA\u02BA(ref string \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF, ref int \u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, char \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC)
	{
		string text = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
		Match match = Regex.Match(text.ToUpperInvariant(), "8EDC4F");
		if (match.Success && match.Value.Length == text.Length)
		{
			\u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF = \u02BB\u02B2\u02BD\u02B9\u02B9\u02B6\u02C0\u02B5\u02B8\u02BA\u02BF.Insert(\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB, \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC.ToString());
			\u02B6\u02BE\u02B8\u02BB\u02B3\u02B4\u02B7\u02B4\u02B6\u02B7\u02BB++;
			return \u02B7\u02BF\u02B7\u02BC\u02B8\u02C0\u02B3\u02C0\u02BA\u02BC\u02BC;
		}
		return '\u0001';
	}
}
